import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import (accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix, roc_curve, roc_auc_score)
import matplotlib.pyplot as plt

#Load data
df = pd.read_csv('filtered_data.csv')

#Select features & target variables
features = ['LVEF', 'creatinine.enzymatic.method']
X = df[features]
y = df['death']

#Test Splits
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

#Train
model = GaussianNB()
model.fit(X_train, y_train)

#Predict & print text metrics
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred, target_names=['Survived','Died']))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

#Compute scores for plotting
accuracy  = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall    = recall_score(y_test, y_pred)
f1_macro  = f1_score(y_test, y_pred, average='macro')

#Plot bar chart
metrics = ['Accuracy', 'Precision', 'Recall', 'F1']
scores  = [accuracy, precision, recall, f1_macro]

plt.figure()
plt.bar(metrics, scores)
plt.ylim(0, 1)
plt.title('Evaluation Model')
plt.ylabel('Score')
plt.show()

#ROC curve: get probability estimates for the positive class (y=1)
y_prob = model.predict_proba(X_test)[:, 1]

#Compute FPR, TPR, and AUC
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = roc_auc_score(y_test, y_prob)
print(f"ROC AUC: {roc_auc:.3f}")

#ROC curve
plt.figure(figsize=(5,4))
plt.plot(fpr, tpr, label=f'Naïve Bayes (AUC = {roc_auc:.3f})', linewidth=2)
plt.plot([0,1], [0,1], linestyle='--', color='grey', linewidth=1)  # random‐guess line
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Naieve Bayes')
plt.legend(loc='lower right')
plt.grid(alpha=0.3)
plt.show()
